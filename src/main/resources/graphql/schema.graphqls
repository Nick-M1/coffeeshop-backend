scalar DateTime
scalar BigDecimal


# MODELS:
type Product {
    id: ID!
    name: String
    productSize: ProductSize
    productType: ProductType
    price: BigDecimal
    img: String
}

type User {
    id: ID!
    username: String
    password: String
    role: Role
}

type TransactionItem {
    id: ID!
    product: Product
    quantity: Int
}

type Transaction {
    id: ID!
    transactionItems: [TransactionItem]
    timestamp: DateTime
    user: User
}


# FOR PAGINATION
type Pageable {
    offset: Int
    pageNumber: Int
    pageSize: Int
}

type ProductResponse {
    content: [Product!]!
    pageable: Pageable
    empty: Boolean
    first: Boolean
    last: Boolean
    number: Int
    numberOfElements: Int
    totalElements: Int
    totalPages: Int
}

type TransactionResponse {
    content: [Transaction!]!
    pageable: Pageable
    empty: Boolean
    first: Boolean
    last: Boolean
    number: Int
    numberOfElements: Int
    totalElements: Int
    totalPages: Int
}

type UserResponse {
    content: [User!]!
    pageable: Pageable
    empty: Boolean
    first: Boolean
    last: Boolean
    number: Int
    numberOfElements: Int
    totalElements: Int
    totalPages: Int
}


# INPUTS
input TransactionInput {
    productId: ID
    quantity: Int
}

input ProductFilter {
    name: String
    productSize: ProductSize
    productType: ProductType
    price: BigDecimal
    img: String
}

input UserFilter {
    username: String
    role: Role
}




# ENUMS
enum ProductSize {
   SMALL, MEDIUM, LARGE
}

enum ProductType {
    HOT_FOOD, COLD_FOOD, HOT_DRINK, COLD_DRINK, SWEET_TREATS
}

enum ProductSortBy {
    NAME_ASC
    NAME_DSC
    PRICE_ASC
    PRICE_DSC
}

enum Role {
    ADMIN, CUSTOMER
}

enum UserSortBy {
    USERNAME_ASC
    USERNAME_DSC
    ROLE_ASC
    ROLE_DSC
}


# QUERIES
type Query {
    findAllProducts(example: ProductFilter, sortBy: ProductSortBy, page: Int, size: Int): ProductResponse
    findOneProduct(id: ID!): Product

    findAllTransactions(page: Int, size: Int): TransactionResponse
    findAllTransactionsByUser(page: Int, size: Int): TransactionResponse
    findOneTransaction(id: ID!): Transaction

    findAllUsers(example: UserFilter, sortBy: UserSortBy, page: Int, size: Int): UserResponse
    findOneUser(id: ID!): User
}


# MUTATIONS
type Mutation {
    createProduct(name: String, productSize: ProductSize, productType: ProductType): Product
    updateProduct(id: ID!, name: String, productSize: ProductSize, productType: ProductType): Product
    deleteProduct(id: ID!): Product

    createTransaction(transactionInput: [TransactionInput]): Transaction
    updateTransaction(id: ID!, transactionInput: [TransactionInput]): Transaction
    deleteTransaction(id: ID!): Transaction

    createUser(name: String, username: String, password: String, role: Role): User
    updateUser(id: ID!, name: String, username: String, role: Role): User
    deleteUser(id: ID!): User
}
